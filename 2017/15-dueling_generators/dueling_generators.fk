{--- Functional programming with Frank ---}

-- some data types
data Bool = true | false

data Nat = zero | suc Nat

data Zero =     -- empty type

-- (the Unit data type is built in)
-- data Unit = unit

data Pair X Y = pair X Y

data Maybe X = nothing | just X

-- (the list data type is built in)
-- data List X = [] | X :: (List X)

append : {List X -> List X -> List X}
append []        ys = ys
append (x :: xs) ys = x :: (append xs ys)

t1 : {List Int}
t1! = append [1, 2] [3, 4]

map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

t2 : {List Int}
t2! = map {n -> n+1} [1, 2, 3]

-- (the Console interface is built in)
-- interface Console = inch : Char
--                   | ouch : Char -> Unit

-- t3 has the Console ability - it can do inch and ouch commands
t3 : {[Console]Unit}
t3! = map ouch "Hello world!\n"; unit

-- The signature:
--
--   map : {{X -> Y} -> List X -> List Y}
--
-- is syntactic sugar for:
--
--   map : {{X -> [E|]Y} -> List X -> [E|]List Y}

print : {String -> [Console]Unit}
print s = map ouch s; unit

-- ouch isn't allowed because badPrint doesn't have the Console ability
--
--badPrint : {String -> Unit}
--badPrint s = map ouch s; unit

--- control

-- fst m n:
--   do m, do n, return the result of doing m
fst : {X -> Y -> X}
fst x y = x

-- snd m n:
--   do m, do n, return the result of doing n
snd : {X -> Y -> Y}
snd x y = y

-- m; n == snd m n

t4 : {[0|Console]Char}
t4! = fst (inch!) (ouch 'f')

t5 : {[0|Console]Char}
t5! = print "Please type a character\n"; inch!

-- eager conditional
iffy : Bool -> X -> X -> X
iffy true  t f = t
iffy false t f = f

t6 : {[0|Console]Unit}
t6! = iffy true (print "T\n") (print "F\n")

-- lazy conditional
if : Bool -> {X} -> {X} -> X
if true  t f = t!
if false t f = f!

t7 : {[0|Console]Unit}
t7! = if true {print "T\n"} {print "F\n"}

-- sequencing
-- case : X -> {X -> Y} -> Y
-- case x f = f x

t8 : {[Console]Int}
t8! = case inch! { 'a' -> 65
                 | 'b' -> 66
                 | x   -> -1 }

-- Alternative implementation of `if' using `on'
--
-- if : Bool -> {X} -> {X} -> X
-- if b t e = on b { true  -> t!
--                 | false -> e! }


--- some user-defined interfaces

interface Send X = send : X -> Unit

interface Receive X = receive : X

interface State S = get : S
                  | put : S -> Unit

interface Choice = choice : Bool

interface Abort = aborting : Zero

--- exceptions

abort : {[Abort]X}
abort! = case aborting! {}
  -- Zero is uninhabited, so no clauses are needed


head : {List X -> [Abort]X}
head []        = abort!
head (x :: xs) = x

tail : {List X -> [Abort]List X}
tail []        = abort!
tail (x :: xs) = xs

foo : {[Console, Abort]Int}
foo! = print "hello\n"; head [1,2,3]

t9 : {[Abort]Int}
t9! = head []

--- an exception handler
catch : {<Abort>X -> {X} -> X}
catch x               h = x
catch <aborting -> k> h = h!

bar : {[Abort]Unit}
bar! = catch (abort!) {abort!}

t10 : {[0]Int}
t10! = catch (head []) { -1 }

t11 : {[0]Int}
t11! = catch (head [42]) { -1 }

t12 : {[0|Console]Int}
t12! = catch (print "hello\n"; head []) { -1 }

assertEquals : { X -> X -> [Abort]Unit}
--assertEquals x y = if (x == y) unit abort!
assertEquals x y = unit 

assertThat : { Bool -> String -> [Console, Abort]Unit}
assertThat false msg = print msg; abort!
assertThat true _ = unit

testDummy : {[Console, Abort]Unit}
testDummy! = assertThat (5 > 3) "dummy!"
--case cond! { false -> unit
--                             | true  -> body!

-- Dont delete these lines, they make this program into a unit test.
-- #desc   examples/fun.fk
-- #return unit

-- just a stub: use --entry-point tXX to do something interesting
main : { List Int }
main! = [ 1, 2, 3]
